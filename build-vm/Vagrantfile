# -*- mode: ruby -*-
# vi: set ft=ruby :

required_plugins = %w(  vagrant-reload )
required_plugins.each do |plugin|
  system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
end
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "datacastle/windows7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
     vb.name = "Tyrrell-vvakkal-VeriWS"
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end
  
    # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline:<<-SHELL
     #Enable network sharing
     netsh advfirewall firewall set rule group="Network Discovery" new enable=Yes
     
     #Download and install 7zip
     wget -OutFile 7z.msi http://d.7-zip.org/a/7z1512-x64.msi
     Start-Process .\\7z.msi /q -Wait

     #Download vm-contents
     cd C:\\Users\\vagrant\\Desktop
     wget -OutFile Licenses.txt  https://github.com/SoftwareEngineeringToolDemos/ICSE-2014-VeriWS/raw/master/build-vm/vm-contents/Licenses.txt
     wget -OutFile How_to_use_VeriWS_on_this_VM-YouTube.url https://github.com/SoftwareEngineeringToolDemos/ICSE-2014-VeriWS/raw/master/build-vm/vm-contents/How%20to%20use%20VeriWS%20on%20this%20VM%20-%20YouTube.url
     wget -OutFile Installation.txt https://github.com/SoftwareEngineeringToolDemos/ICSE-2014-VeriWS/raw/master/build-vm/vm-contents/Installation.txt
     wget -OutFile Readme.txt https://github.com/SoftwareEngineeringToolDemos/ICSE-2014-VeriWS/raw/master/build-vm/vm-contents/Readme.txt

     #Make a new directory
     mkdir VeriWS
     cd VeriWS
     
     #Copy the shared files and extract
     cp C:\\vagrant\\* .
     & 'C:\\Program Files\\7-Zip\\7z.exe' x Debug.7z
     & 'C:\\Program Files\\7-Zip\\7z.exe' x Example.7z

     #Copy the project files to retain state
     cp 'C:\\Users\\vagrant\\Desktop\\VeriWS\\PAT 3.ini' 'C:\\Users\\vagrant\\Desktop\\VeriWS\\Debug'
     cp 'C:\\Users\\vagrant\\Desktop\\VeriWS\\recents.xml' 'C:\\Users\\vagrant\\Desktop\\VeriWS\\Debug'

     #Create desktop shortcut
     $TargetFile = "C:\\Users\\vagrant\\Desktop\\VeriWS\\Debug\\PAT 3.exe"
     $ShortcutFile = "C:\\Users\\vagrant\\Desktop\\PAT 3.exe.lnk"
     $WScriptShell = New-Object -ComObject WScript.Shell
     $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
     $Shortcut.TargetPath = $TargetFile
     $Shortcut.Save()

     #Copy the shortcut to startup folder
     cp 'C:\\Users\\vagrant\\Desktop\\PAT 3.exe.lnk' 'C:\\Users\\vagrant\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup'

     #Remove unnecessary files
     del 'C:\\Users\\vagrant\\Desktop\\VeriWS\\Debug.7z'
     del 'C:\\Users\\vagrant\\Desktop\\VeriWS\\Example.7z'
     del 'C:\\Users\\vagrant\\Desktop\\VeriWS\\PAT 3.ini'
     del 'C:\\Users\\vagrant\\Desktop\\VeriWS\\recents.xml'
     del 'C:\\Users\\vagrant\\Desktop\\VeriWS\\Vagrantfile'

     #change power options
     powercfg -change -monitor-timeout-ac 0
     powercfg -change -standby-timeout-ac 0
     powercfg -change -disk-timeout-ac 0
     powercfg -change -hibernate-timeout-ac 0

    SHELL

    #Restart for the changes to effect
    config.vm.provision :reload
end
